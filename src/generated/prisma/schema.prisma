// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model corpus {
  id          String        @id @default(uuid())
  userId      String
  name        String
  description String
  createdAt   DateTime      @default(now())
  // One-to-Many: corpora to corporaFiles
  corpusFiles corpusFiles[] @relation("CorpusToFiles")

  // Unique constraint on (userId, name)
  @@unique([userId, name])
  @@map("superexpert_ai_corpus")
}

model corpusFiles {
  id           String   @id @default(uuid())
  userId       String
  fileName     String
  chunkSize    Int
  chunkOverlap Int
  createdAt    DateTime @default(now())
  // Foreign Key: corpusId (Many-to-One relationship with corpus)
  corpusId     String
  corpus       corpus   @relation("CorpusToFiles", fields: [corpusId], references: [id])

  // One-to-Many: corporaFiles to corporaFileChunks
  corporaFileChunks corpusFileChunks[] @relation("FilesToChunks")

  @@map("superexpert_ai_corpusFiles")
}

model corpusFileChunks {
  id           Int                          @id @default(autoincrement())
  userId       String
  chunk        String
  embedding    Unsupported("vector(1536)")?
  // Foreign Key: corporaFileId (Many-to-One relationship with corporaFiles)
  corpusFileId String
  corpusFile   corpusFiles                  @relation("FilesToChunks", fields: [corpusFileId], references: [id], onDelete: Cascade)

  @@map("superexpert_ai_corpusFileChunks")
}
